---- PLSQL Functions ----
- SUBSTR( string, start_position [, length ] )
- Parameters or Arguments:
- string : The source string.
- start_position : The starting position for extraction. The first position in the string is always 1.
- length : Optional. It is the number of characters to extract. If this parameter is omitted, the SUBSTR function will return the entire string.
ex.:
    L_CHR_SRC_PO_CODE1 := SUBSTR (P_PO_ADDRESS_REC.POSTAL_CODE, 1, 5);

- LOVs (List Of Values) : pre-defined set/list of values/records.
    - ex: list of districts of a state.

- LookUp : stores custom data/information in the form of table which is updatable.

- INTO clause should be used for single row query.
- THe 'BULK COLLECT INTO' or 'OPEN FOR' clause is used for multiple-row queries.

- BEQUEATH DEFINER
If the BEQUEATH DEFINER clause is explicitly mentioned in the view, then the functions called from within the view will be called using the permissions of the view owner, regardless of the permissions of the user calling the view. This means that the user calling the view will not be able to use their own privileges to access data that is not accessible to the view owner.
For example, consider the following view:
CREATE VIEW my_view (id, name) AS
SELECT id, name
FROM my_table;
BEQUEATH DEFINER;

This view can be called by any user, but the functions called from within the view will only have access to the data that the view owner (the user who created the view) has access to.

For example, if the view owner has SELECT privileges on the my_table table, but the user calling the view does not, then the user calling the view will not be able to see any data from the my_table table when they call the view.

The BEQUEATH DEFINER clause can be a useful tool for controlling the privileges of functions called from within a view. However, it is important to understand how the clause works and how it can be overridden.

Here are some of the implications of explicitly mentioning the BEQUEATH DEFINER clause in a view:

Users calling the view will not be able to use their own privileges to access data that is not accessible to the view owner.
The view owner will be able to control the privileges of the functions called from within the view.
The BEQUEATH DEFINER clause can be overridden by using the WITH GRANT OPTION clause when creating the view.
It is important to use the BEQUEATH DEFINER clause carefully to ensure that the privileges of the functions called from within the view are controlled appropriately.

- CTE
A common table expression (CTE) is a temporary named result set that is created from a simple SELECT statement and can be used in a subsequent SELECT statement. Each SQL CTE is like a named query, whose result is stored in a virtual table (a CTE) to be referenced later in the main query.

CTEs are a powerful tool that can be used to improve the readability and performance of SQL queries. They can be used to:

Simplify complex queries by breaking them down into smaller, more manageable steps.
Improve the performance of queries by pre-aggregating data or performing other optimizations.
Provide a way to reuse data in multiple queries.
To use a CTE, you first need to define it using the WITH clause. The WITH clause follows the CREATE TABLE or CREATE VIEW statement. The CTE definition is similar to a normal SELECT statement, but it cannot contain any DML statements.

Once you have defined a CTE, you can reference it in a subsequent SELECT statement using the FROM clause. The CTE name will be treated as a table, and you can use it in the same way that you would use a regular table.

Here is an example of a CTE:
WITH employees AS (
  SELECT *
  FROM employees
)
SELECT *
FROM employees
WHERE department = 'sales';

This CTE creates a temporary table called employees that contains all of the rows from the employees table. The main SELECT statement then selects all of the rows from the employees table where the department column is equal to sales.

CTEs are a powerful tool that can be used to improve the readability and performance of SQL queries. They are a valuable addition to the SQL language, and they can be used to make your queries more efficient and easier to understand.

Here are some of the benefits of using CTEs:

Readability: CTEs can make your queries more readable by breaking them down into smaller, more manageable steps. This can make your queries easier to understand and debug.
Performance: CTEs can improve the performance of your queries by pre-aggregating data or performing other optimizations. This can be especially beneficial for complex queries that involve a lot of data.
Reusability: CTEs can be reused in multiple queries. This can save you time and effort by eliminating the need to rewrite the same code multiple times.
If you are not already using CTEs, I encourage you to give them a try. They are a powerful tool that can help you write better, more efficient SQL queries.


